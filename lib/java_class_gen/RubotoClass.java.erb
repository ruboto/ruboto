/**********************************************************************************************
*
* Ruboto<%= @class %>.java is generated from RubotoClass.java.erb. Any changes needed in should be 
* made within the erb template or they will be lost.
*
*/

package org.ruboto;

import java.io.IOException;
import <%= @full_class %>;
% if @class == "Activity"
import android.app.ProgressDialog;
% end
import android.os.Handler;
import android.os.Bundle;

import org.jruby.Ruby;
import org.jruby.javasupport.util.RuntimeHelpers;
import org.jruby.runtime.builtin.IRubyObject;
import org.jruby.javasupport.JavaUtil;
import org.jruby.exceptions.RaiseException;

public<%= @class == "Activity" ? "" : " abstract" %> class Ruboto<%= @class %> extends <%= @class %>
%##############################################################################################
%#
%#  Implement all interfaces
%#
    <%= "implements\n        #{@implements.join(",\n        ")}" unless @implements.empty? %>
%##############################################################################################
{
%##############################################################################################
%#
%#  Create constants for all callbacks (may get rid of this means of requesting callbacks later)
%#
%    @constants.each_with_index do |c, i|
<%= "    public static final int #{c} = #{i};" %>
%    end
%##############################################################################################
	public static final int CB_LAST = <%= @constants.size %>;
	
	private boolean[] callbackOptions = new boolean [CB_LAST];
    
	private String remoteVariable = "";

    private final Handler loadingHandler = new Handler();
    private IRubyObject __this__;
    private Ruby __ruby__;
    private String scriptName;
    public Object[] args;

	public Ruboto<%= @class %> setRemoteVariable(String var) {
		remoteVariable = ((var == null) ? "" : (var + "."));
		return this;
	}
	
	/**********************************************************************************
	 *  
	 *  Callback management
	 */
	
	public void requestCallback(int id) {
		callbackOptions[id] = true;
	}
	
	public void removeCallback(int id) {
		callbackOptions[id] = false;
	}
	
	/* 
	 *  Activity Lifecycle: onCreate
	 */
	
	@Override
%       v = @callbacks[@full_class].delete(@first_method)
	public <%= "#{v["return_type"]} #{v["interface_method"]}(#{v["args_with_types"] })" %> {

               args = new Object[<%= v["args_alone"].length %>];
%              v["args_alone"].each_with_index do |arg, index|
               args[<%= index %>] = <%= arg %>;
%              end
%              unless v["abstract"]
		super.<%= @first_method %>(<%= v["args_alone"].join(',') %>);
%              end

%               if @class == "Activity"
%               # we'll assume the first thing that happens is an activity gets spawned. no need to do this in other classes
                Script.copyScriptsIfNeeded(getFilesDir().getAbsolutePath() + "/scripts", getAssets());
%               end

		if (Script.getRuby() == null){
                    Script.setUpJRuby(null);
		}
                Script.defineGlobalVariable("$<%= underscore(@class) %>", this);


                __ruby__ = Script.getRuby();
                __this__ = JavaUtil.convertJavaToRuby(__ruby__, Ruboto<%= @class %>.this);

%             if @class == "Activity"
                Bundle configBundle = getIntent().getBundleExtra("RubotoActivity Config");

                Script.defineGlobalVariable("$bundle", arg0);

                if (configBundle != null) {
                    setRemoteVariable(configBundle.getString("Remote Variable"));
                    if (configBundle.getBoolean("Define Remote Variable")) {
                        Script.defineGlobalVariable(configBundle.getString("Remote Variable"), this);
                        setRemoteVariable(configBundle.getString("Remote Variable"));
                    }
                    if (configBundle.getString("Initialize Script") != null) {
                        Script.execute(configBundle.getString("Initialize Script"));
                    }
                    Script.execute(remoteVariable + "on_create($bundle)");
                } else {
                    Script.defineGlobalVariable("$activity", this);

                    try {
                        new Script(scriptName).execute();
                    }
                    catch(IOException e){
                        ProgressDialog.show(this, "Script failed", "Something bad happened", true, false);
                    }
		}
%             else
                try {
                    new Script(scriptName).execute();
                }
                catch(IOException e){

                }
%             end
	}

        public void setScriptName(String name){
               scriptName = name;
        }
	


	/*********************************************************************************
	 *
	 * Ruby Generated Callback Methods
	 */
	
%##############################################################################################
%#
%#  Create one Java callback methods
%#
%    @callbacks.each do |interface,i_info|
	/*
	 * <%= interface %>
	 */

%      i_info.each do |method,v|
	public <%= "#{v["return_type"]} #{v["interface_method"]}(#{v["args_with_types"] })" %> {
		if (callbackOptions[<%= v['constant']%>]) {
			<%= "super.#{v["method"]}(#{v["args_alone"].join(", ")});" if v["interface"] == "Activity" %>
            try {
%             if v["args_alone"].size > 3
            	IRubyObject[] args = {<%= v["args_alone"].map{|i| "JavaUtil.convertJavaToRuby(__ruby__, #{i})"}.join(", ") %>};
            	<%= "return (#{transform_return_type v["return_type"]})" if v["return_type"] != "void" %>RuntimeHelpers.invoke(__ruby__.getCurrentContext(), __this__, "<%=v["ruby_method"]%>", args)<%= ".toJava(#{v["return_type"]}.class)" if v["return_type"] != "void" %>;
%             elsif v["args_alone"].size > 0 
            	<%= "return (#{transform_return_type v["return_type"]})" if v["return_type"] != "void" %>RuntimeHelpers.invoke(__ruby__.getCurrentContext(), __this__, "<%=v["ruby_method"]%>", <%= v["args_alone"].map{|i| "JavaUtil.convertJavaToRuby(__ruby__, #{i})"}.join(", ") %>)<%= ".toJava(#{v["return_type"]}.class)" if v["return_type"] != "void"%>;
%             else 
            	<%= "return (#{transform_return_type v["return_type"]})" if v["return_type"] != "void" %>RuntimeHelpers.invoke(__ruby__.getCurrentContext(), __this__, "<%=v["ruby_method"]%>")<%= ".toJava(#{v["return_type"]}.class)" if v["return_type"] != "void"%>;
%             end
            } catch (RaiseException re) {
                re.printStackTrace(__ruby__.getErrorStream());
                <%= case v["return_type"]
                           when "boolean": "return false;"
                           when "int":     "return 0;"
                           when "void":    ""
                           else            "return null;"
                           end
                                  %>
            }
%     if v["interface"] == "Activity" 
		} else {
			<%= "return " unless v["return_type"] == "void" %><%= "super.#{v["method"]}(#{v["args_alone"].join(", ")});" %>
%     elsif v["return_type"] != "void"
		} else {
                <%= case v["return_type"]
                           when "boolean": "return false;"
                           when "int":     "return 0;"
                           when "void":    ""
                           else            "return null;"
                           end
                                  %>
%     end
		}
	}
	
%      end
%    end
%##############################################################################################
}
